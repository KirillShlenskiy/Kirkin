* Mapper: member factory:
  Member.ReadOnly.FromProperty<Dummy>(d => d.ID);
  Member.ReadWrite.ExpressionGetterDelegateSetter<Dummy, int>(d => d.ID, (d, value) => d.ID = value);
  Member.Factory.ReadOnlyFromExpression<Dummy>(d => d.ID);
  Member.Factory.ReadWriteHybrid<Dummy>(d => d.ID, (d, value) => d.ID = (int)value);
  Member<Dummy>.WithExpressionGetter(d => d.ID).AndDelegateSetter((d, v) => d.ID = v);

* Mapper: custom event/delegate-based Member<T> mapping to allow injection of code to be executed at mapping stage.
  This would be useful to be able to replicate the old TypeMapping.Map<T>(T source, T target, out int changeCount) behaviour. 

* Mapper: global custom conversion
  "If source member type is T1 and target member type is T2, use this delegate/expression/converter".

* PropertyValueEqualityComparer.Equals / GetHashCode static proxies?
  Think TypeMapping<T>.Default.Map being substituted for TypeMapping.Map - use type inference for future-proofing reflection-based code.

* ExpressionEngine constructor support:
  ExpressionEngine.Constructor<ImmutableArray<T>, T[]>(nonPublic: true).Compile();
  ExpressionEngine.Constructor<ImmutableArray<T>>().WithArgument<T[]>(nonPublic: true).Compile();